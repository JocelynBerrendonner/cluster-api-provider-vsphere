{
  "openapi": "3.0.0",
  "info": {
    "title": "HAProxy Data Plane API",
    "description": "API for editing and managing haproxy instances. Provides process information, configuration management,\nhaproxy stats and logs.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "version": "1.2",
    "contact": {
      "name": "HAProxy Support",
      "url": "https://my.haproxy.com/portal/cust/login",
      "email": "support@haproxy.com"
    }
  },
  "externalDocs": {
    "url": "https://cbonte.github.io/haproxy-dconv/",
    "description": "HAProxy Documentation"
  },
  "tags": [
    {
      "name": "Discovery",
      "description": "API autodiscover endpoints"
    },
    {
      "name": "Information"
    },
    {
      "name": "Specification"
    },
    {
      "name": "Transactions",
      "description": "Managing transactions. Configuration changes can be grouped in the transaction. You start the\ntransaction with trasactions POST, and call the configuration changes you need with parameter\ntransaction_id. When you want to commit the transaction, you call the transactions PUT and all changes\nin that transaction is commited. If you call a configuration change without the transaction_id,\ntransaction mechanism is implicitly called with one operation in transaction.\n"
    },
    {
      "name": "Reloads",
      "description": "Checking reload success. To avoid constant reloading we reload in intervals that are configurable when\nwith reload-delay option. When a change to configuration is made and force_reload url query string\nparameter is false we issue a request for reload, and return the reload ID in response header. You can\nthen use reloads endpoints to check the status of that reload ID. If force_reload is true, we override all\nof this and reload immediately.\n"
    },
    {
      "name": "Sites",
      "description": "Managing sites (simple configuration mode). Sites are considered as one frontend with multiple backends\nconnected to it via default_backend or use-backend directives.\n"
    },
    {
      "name": "Stats",
      "description": "Stats container"
    },
    {
      "name": "Global",
      "description": "Managing global configuration (advanced mode)"
    },
    {
      "name": "Defaults",
      "description": "Managing defaults configuration (advanced mode)"
    },
    {
      "name": "Frontend",
      "description": "Managing frontend configuration (advanced mode)"
    },
    {
      "name": "Backend",
      "description": "Managing backend configurations (advanced mode)"
    },
    {
      "name": "Bind",
      "description": "Managing frontend bind configurations (advanced mode)"
    },
    {
      "name": "Server",
      "description": "Managing backend server configurations (advanced mode)"
    },
    {
      "name": "Frontend options",
      "description": "Various frontend options (advanced mode)"
    },
    {
      "name": "Backend options",
      "description": "Various backend options (advanced mode)"
    },
    {
      "name": "Configuration",
      "description": "Raw HAProxy configuration management (advanced mode)"
    },
    {
      "name": "HAProxy configuration management",
      "description": "Managing advanced haproxy configuration (advanced mode)"
    },
    {
      "name": "TCPRequestRule"
    },
    {
      "name": "HTTPRequestRule"
    },
    {
      "name": "HTTPResponseRule"
    },
    {
      "name": "BackendSwitchingRule"
    },
    {
      "name": "ServerSwitchingRule"
    },
    {
      "name": "TCPResponseRule"
    },
    {
      "name": "Filter"
    },
    {
      "name": "StickRule"
    },
    {
      "name": "LogTarget"
    },
    {
      "name": "ACL"
    }
  ],
  "security": [
    {
      "basic_auth": []
    }
  ],
  "paths": {
    "/": {
      "get": {
        "description": "Returns a list of root endpoints.",
        "operationId": "getAPIEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpoints"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return list of root endpoints",
        "tags": [
          "Discovery"
        ]
      }
    },
    "/specification": {
      "get": {
        "description": "Return Data Plane API OpenAPI specification",
        "operationId": "getSpecification",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Data Plane API Specification",
        "tags": [
          "Specification"
        ]
      }
    },
    "/info": {
      "get": {
        "description": "Return API, hardware and OS information",
        "operationId": "getInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/info"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return API, hardware and OS information",
        "tags": [
          "Information"
        ]
      }
    },
    "/services": {
      "get": {
        "description": "Returns a list of API managed services endpoints.",
        "operationId": "getServicesEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpoints"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return list of service endpoints",
        "tags": [
          "Discovery"
        ]
      }
    },
    "/services/haproxy": {
      "get": {
        "description": "Returns a list of HAProxy related endpoints.",
        "operationId": "getHaproxyEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpoints"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return list of HAProxy related endpoints",
        "tags": [
          "Discovery"
        ]
      }
    },
    "/services/haproxy/info": {
      "get": {
        "description": "Return HAProxy process information",
        "operationId": "getHaproxyProcessInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/process_info"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return HAProxy process information",
        "tags": [
          "Information"
        ]
      }
    },
    "/services/haproxy/sites": {
      "get": {
        "description": "Returns an array of all configured sites.",
        "operationId": "getSites",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/sites"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of sites",
        "tags": [
          "Sites"
        ]
      },
      "post": {
        "description": "Adds a new site to the configuration file.",
        "operationId": "createSite",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/site"
        },
        "responses": {
          "201": {
            "description": "Site created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/site"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/site"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a site",
        "tags": [
          "Sites"
        ]
      }
    },
    "/services/haproxy/sites/{name}": {
      "delete": {
        "description": "Deletes a site from the configuration by it's name.",
        "operationId": "deleteSite",
        "parameters": [
          {
            "description": "Site frontend name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Site deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a site",
        "tags": [
          "Sites"
        ]
      },
      "get": {
        "description": "Returns one site configuration by it's name.",
        "operationId": "getSite",
        "parameters": [
          {
            "description": "Site frontend name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/site"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return a site",
        "tags": [
          "Sites"
        ]
      },
      "put": {
        "description": "Replaces a site configuration by it's name.",
        "operationId": "replaceSite",
        "parameters": [
          {
            "description": "Site frontend name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/site"
        },
        "responses": {
          "200": {
            "description": "Site replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/site"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/site"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a site",
        "tags": [
          "Sites"
        ]
      }
    },
    "/services/haproxy/stats": {
      "get": {
        "description": "Returns a list of HAProxy stats endpoints.",
        "operationId": "getStatsEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpoints"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return list of HAProxy stats endpoints",
        "tags": [
          "Discovery"
        ]
      }
    },
    "/services/haproxy/stats/native": {
      "get": {
        "description": "Getting stats from the HAProxy.",
        "operationId": "getStats",
        "parameters": [
          {
            "description": "Object type to get stats for (one of frontend, backend, server)",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend",
                "server"
              ]
            }
          },
          {
            "description": "Object name to get stats for",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Object parent name to get stats for, in case the object is a server",
            "in": "query",
            "name": "parent",
            "required": false,
            "x-dependency": {
              "query.type": "server"
            },
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/native_stats"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/native_stats"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Gets stats",
        "tags": [
          "Stats"
        ]
      }
    },
    "/services/haproxy/transactions": {
      "get": {
        "description": "Returns a list of HAProxy configuration transactions. Transactions can be filtered by their status.",
        "operationId": "getTransactions",
        "parameters": [
          {
            "description": "Filter by transaction status",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "failed",
                "in_progress"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactions"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return list of HAProxy configuration transactions.",
        "tags": [
          "Transactions"
        ]
      },
      "post": {
        "description": "Starts a new transaction and returns it's id",
        "operationId": "startTransaction",
        "parameters": [
          {
            "description": "Configuration version on which to work on",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Start a new transaction",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/services/haproxy/transactions/{id}": {
      "delete": {
        "description": "Deletes a transaction.",
        "operationId": "deleteTransaction",
        "parameters": [
          {
            "description": "Transaction id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Transaction deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a transaction",
        "tags": [
          "Transactions"
        ]
      },
      "get": {
        "description": "Returns one HAProxy configuration transactions.",
        "operationId": "getTransaction",
        "parameters": [
          {
            "description": "Transaction id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one HAProxy configuration transactions",
        "tags": [
          "Transactions"
        ]
      },
      "put": {
        "description": "Commit transaction, execute all operations in transaction and return msg",
        "operationId": "commitTransaction",
        "parameters": [
          {
            "description": "Transaction id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction succesfully commited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Commit transaction",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/services/haproxy/reloads": {
      "get": {
        "description": "Returns a list of HAProxy reloads.",
        "operationId": "getReloads",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reloads"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return list of HAProxy Reloads.",
        "tags": [
          "Reloads"
        ]
      }
    },
    "/services/haproxy/reloads/{id}": {
      "get": {
        "description": "Returns one HAProxy reload status.",
        "operationId": "getReload",
        "parameters": [
          {
            "description": "Reload id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}-\\d+$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reload"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one HAProxy reload status",
        "tags": [
          "Reloads"
        ]
      }
    },
    "/services/haproxy/configuration": {
      "get": {
        "description": "Returns a list of endpoints to be used for advanced configuration of HAProxy objects.",
        "operationId": "getConfigurationEndpoints",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpoints"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return list of HAProxy advanced configuration endpoints",
        "tags": [
          "Discovery"
        ]
      }
    },
    "/services/haproxy/configuration/global": {
      "get": {
        "description": "Returns global part of configuration.",
        "operationId": "getGlobal",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/global"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return a global part of configuration",
        "tags": [
          "Global",
          "HAProxy configuration management"
        ]
      },
      "put": {
        "description": "Replace global part of config",
        "operationId": "replaceGlobal",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/global"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Global replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/global"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/global"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace global",
        "tags": [
          "Global",
          "HAProxy configuration management"
        ]
      }
    },
    "/services/haproxy/configuration/defaults": {
      "get": {
        "description": "Returns defaults part of configuration.",
        "operationId": "getDefaults",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/defaults"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return defaults part of configuration",
        "tags": [
          "Defaults",
          "HAProxy configuration management"
        ]
      },
      "put": {
        "description": "Replace defaults part of config",
        "operationId": "replaceDefaults",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/defaults"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Defaults replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/defaults"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/defaults"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace defaults",
        "tags": [
          "Defaults",
          "HAProxy configuration management"
        ]
      }
    },
    "/services/haproxy/configuration/frontends": {
      "get": {
        "description": "Returns an array of all configured frontends.",
        "operationId": "getFrontends",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/frontends"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of frontends",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ]
      },
      "post": {
        "description": "Adds a new frontend to the configuration file.",
        "operationId": "createFrontend",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/frontend"
        },
        "responses": {
          "201": {
            "description": "Frontend created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/frontend"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/frontend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a frontend",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ]
      }
    },
    "/services/haproxy/configuration/frontends/{name}": {
      "delete": {
        "description": "Deletes a frontend from the configuration by it's name.",
        "operationId": "deleteFrontend",
        "parameters": [
          {
            "description": "Frontend name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Frontend deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a frontend",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ]
      },
      "get": {
        "description": "Returns one frontend configuration by it's name.",
        "operationId": "getFrontend",
        "parameters": [
          {
            "description": "Frontend name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/frontend"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return a frontend",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ]
      },
      "put": {
        "description": "Replaces a frontend configuration by it's name.",
        "operationId": "replaceFrontend",
        "parameters": [
          {
            "description": "Frontend name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/frontend"
        },
        "responses": {
          "200": {
            "description": "Frontend replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/frontend"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/frontend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a frontend",
        "tags": [
          "Frontend",
          "HAProxy configuration management"
        ]
      }
    },
    "/services/haproxy/configuration/backends": {
      "get": {
        "description": "Returns an array of all configured backends.",
        "operationId": "getBackends",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/backends"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of backends",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ]
      },
      "post": {
        "description": "Adds a new backend to the configuration file.",
        "operationId": "createBackend",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/backend"
        },
        "responses": {
          "201": {
            "description": "Backend created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backend"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a backend",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ]
      }
    },
    "/services/haproxy/configuration/backends/{name}": {
      "delete": {
        "description": "Deletes a frontend from the configuration by it's name.",
        "operationId": "deleteBackend",
        "parameters": [
          {
            "description": "Backend name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Backend deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a backend",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ]
      },
      "get": {
        "description": "Returns one backend configuration by it's name.",
        "operationId": "getBackend",
        "parameters": [
          {
            "description": "Backend name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/backend"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return a backend",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ]
      },
      "put": {
        "description": "Replaces a backend configuration by it's name.",
        "operationId": "replaceBackend",
        "parameters": [
          {
            "description": "Backend name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/backend"
        },
        "responses": {
          "200": {
            "description": "Backend replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backend"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a backend",
        "tags": [
          "Backend",
          "HAProxy configuration management"
        ]
      }
    },
    "/services/haproxy/configuration/binds": {
      "get": {
        "description": "Returns an array of all binds that are configured in specified frontend.",
        "operationId": "getBinds",
        "parameters": [
          {
            "description": "Parent frontend name",
            "in": "query",
            "name": "frontend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/binds"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of binds",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ]
      },
      "post": {
        "description": "Adds a new bind in the specified frontend in the configuration file.",
        "operationId": "createBind",
        "parameters": [
          {
            "description": "Parent frontend name",
            "in": "query",
            "name": "frontend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bind"
        },
        "responses": {
          "201": {
            "description": "Bind created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bind"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bind"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new bind",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ]
      }
    },
    "/services/haproxy/configuration/binds/{name}": {
      "delete": {
        "description": "Deletes a bind configuration by it's name in the specified frontend.",
        "operationId": "deleteBind",
        "parameters": [
          {
            "description": "Bind name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent frontend name",
            "in": "query",
            "name": "frontend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Bind deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a bind",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ]
      },
      "get": {
        "description": "Returns one bind configuration by it's name in the specified frontend.",
        "operationId": "getBind",
        "parameters": [
          {
            "description": "Bind name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent frontend name",
            "in": "query",
            "name": "frontend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/bind"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one bind",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ]
      },
      "put": {
        "description": "Replaces a bind configuration by it's name in the specified frontend.",
        "operationId": "replaceBind",
        "parameters": [
          {
            "description": "Bind name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent frontend name",
            "in": "query",
            "name": "frontend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bind"
        },
        "responses": {
          "200": {
            "description": "Bind replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bind"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bind"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a bind",
        "tags": [
          "Bind",
          "HAProxy configuration management",
          "Frontend options"
        ]
      }
    },
    "/services/haproxy/configuration/servers": {
      "get": {
        "description": "Returns an array of all servers that are configured in specified backend.",
        "operationId": "getServers",
        "parameters": [
          {
            "description": "Parent backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/servers"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of servers",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ]
      },
      "post": {
        "description": "Adds a new server in the specified backend in the configuration file.",
        "operationId": "createServer",
        "parameters": [
          {
            "description": "Parent backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/server"
        },
        "responses": {
          "201": {
            "description": "Server created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new server",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ]
      }
    },
    "/services/haproxy/configuration/servers/{name}": {
      "delete": {
        "description": "Deletes a server configuration by it's name in the specified backend.",
        "operationId": "deleteServer",
        "parameters": [
          {
            "description": "Server name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Server deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a server",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ]
      },
      "get": {
        "description": "Returns one server configuration by it's name in the specified backend.",
        "operationId": "getServer",
        "parameters": [
          {
            "description": "Server name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/server"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one server",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ]
      },
      "put": {
        "description": "Replaces a server configuration by it's name in the specified backend.",
        "operationId": "replaceServer",
        "parameters": [
          {
            "description": "Server name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/server"
        },
        "responses": {
          "200": {
            "description": "Server replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a server",
        "tags": [
          "Server",
          "HAProxy configuration management",
          "Backend options"
        ]
      }
    },
    "/services/haproxy/configuration/http_request_rules": {
      "get": {
        "description": "Returns all HTTP Request Rules that are configured in specified parent.",
        "operationId": "getHTTPRequestRules",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/http_request_rules"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of all HTTP Request Rules",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ]
      },
      "post": {
        "description": "Adds a new HTTP Request Rule of the specified type in the specified parent.",
        "operationId": "createHTTPRequestRule",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/http_request_rule"
        },
        "responses": {
          "201": {
            "description": "HTTP Request Rule created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/http_request_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/http_request_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new HTTP Request Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ]
      }
    },
    "/services/haproxy/configuration/http_request_rules/{id}": {
      "delete": {
        "description": "Deletes a HTTP Request Rule configuration by it's ID from the specified parent.",
        "operationId": "deleteHTTPRequestRule",
        "parameters": [
          {
            "description": "HTTP Request Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "HTTP Request Rule deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a HTTP Request Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ]
      },
      "get": {
        "description": "Returns one HTTP Request Rule configuration by it's ID in the specified parent.",
        "operationId": "getHTTPRequestRule",
        "parameters": [
          {
            "description": "HTTP Request Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/http_request_rule"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one HTTP Request Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ]
      },
      "put": {
        "description": "Replaces a HTTP Request Rule configuration by it's ID in the specified parent.",
        "operationId": "replaceHTTPRequestRule",
        "parameters": [
          {
            "description": "HTTP Request Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/http_request_rule"
        },
        "responses": {
          "200": {
            "description": "HTTP Request Rule replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/http_request_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/http_request_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a HTTP Request Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPRequestRule"
        ]
      }
    },
    "/services/haproxy/configuration/http_response_rules": {
      "get": {
        "description": "Returns all HTTP Response Rules that are configured in specified parent.",
        "operationId": "getHTTPResponseRules",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/http_response_rules"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of all HTTP Response Rules",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ]
      },
      "post": {
        "description": "Adds a new HTTP Response Rule of the specified type in the specified parent.",
        "operationId": "createHTTPResponseRule",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/http_response_rule"
        },
        "responses": {
          "201": {
            "description": "HTTP Response Rule created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/http_response_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/http_response_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new HTTP Response Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ]
      }
    },
    "/services/haproxy/configuration/http_response_rules/{id}": {
      "delete": {
        "description": "Deletes a HTTP Response Rule configuration by it's ID from the specified parent.",
        "operationId": "deleteHTTPResponseRule",
        "parameters": [
          {
            "description": "HTTP Response Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "HTTP Response Rule deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a HTTP Response Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ]
      },
      "get": {
        "description": "Returns one HTTP Response Rule configuration by it's ID in the specified parent.",
        "operationId": "getHTTPResponseRule",
        "parameters": [
          {
            "description": "HTTP Response Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/http_response_rule"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one HTTP Response Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ]
      },
      "put": {
        "description": "Replaces a HTTP Response Rule configuration by it's ID in the specified parent.",
        "operationId": "replaceHTTPResponseRule",
        "parameters": [
          {
            "description": "HTTP Response Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/http_response_rule"
        },
        "responses": {
          "200": {
            "description": "HTTP Response Rule replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/http_response_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/http_response_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a HTTP Response Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "HTTPResponseRule"
        ]
      }
    },
    "/services/haproxy/configuration/tcp_request_rules": {
      "get": {
        "description": "Returns all TCP Request Rules that are configured in specified parent and parent type.",
        "operationId": "getTCPRequestRules",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/tcp_request_rules"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of all TCP Request Rules",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ]
      },
      "post": {
        "description": "Adds a new TCP Request Rule of the specified type in the specified parent.",
        "operationId": "createTCPRequestRule",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/tcp_request_rule"
        },
        "responses": {
          "201": {
            "description": "TCP Request Rule created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tcp_request_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tcp_request_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new TCP Request Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ]
      }
    },
    "/services/haproxy/configuration/tcp_request_rules/{id}": {
      "delete": {
        "description": "Deletes a TCP Request Rule configuration by it's ID from the specified parent.",
        "operationId": "deleteTCPRequestRule",
        "parameters": [
          {
            "description": "TCP Request Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "TCP Request Rule deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a TCP Request Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ]
      },
      "get": {
        "description": "Returns one TCP Request Rule configuration by it's ID in the specified parent.",
        "operationId": "getTCPRequestRule",
        "parameters": [
          {
            "description": "TCP Request Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/tcp_request_rule"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one TCP Request Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ]
      },
      "put": {
        "description": "Replaces a TCP Request Rule configuration by it's ID in the specified parent.",
        "operationId": "replaceTCPRequestRule",
        "parameters": [
          {
            "description": "TCP Request Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/tcp_request_rule"
        },
        "responses": {
          "200": {
            "description": "TCP Request Rule replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tcp_request_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tcp_request_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a TCP Request Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPRequestRule"
        ]
      }
    },
    "/services/haproxy/configuration/tcp_response_rules": {
      "get": {
        "description": "Returns all TCP Response Rules that are configured in specified backend.",
        "operationId": "getTCPResponseRules",
        "parameters": [
          {
            "description": "Parent backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/tcp_response_rules"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of all TCP Response Rules",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ]
      },
      "post": {
        "description": "Adds a new TCP Response Rule of the specified type in the specified backend.",
        "operationId": "createTCPResponseRule",
        "parameters": [
          {
            "description": "Parent backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/tcp_response_rule"
        },
        "responses": {
          "201": {
            "description": "TCP Response Rule created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tcp_response_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tcp_response_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new TCP Response Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ]
      }
    },
    "/services/haproxy/configuration/tcp_response_rules/{id}": {
      "delete": {
        "description": "Deletes a TCP Response Rule configuration by it's ID from the specified backend.",
        "operationId": "deleteTCPResponseRule",
        "parameters": [
          {
            "description": "TCP Response Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "TCP Response Rule deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a TCP Response Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ]
      },
      "get": {
        "description": "Returns one TCP Response Rule configuration by it's ID in the specified backend.",
        "operationId": "getTCPResponseRule",
        "parameters": [
          {
            "description": "TCP Response Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/tcp_response_rule"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one TCP Response Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ]
      },
      "put": {
        "description": "Replaces a TCP Response Rule configuration by it's ID in the specified backend.",
        "operationId": "replaceTCPResponseRule",
        "parameters": [
          {
            "description": "TCP Response Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/tcp_response_rule"
        },
        "responses": {
          "200": {
            "description": "TCP Response Rule replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tcp_response_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tcp_response_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a TCP Response Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "TCPResponseRule"
        ]
      }
    },
    "/services/haproxy/configuration/backend_switching_rules": {
      "get": {
        "description": "Returns all Backend Switching Rules that are configured in specified frontend.",
        "operationId": "getBackendSwitchingRules",
        "parameters": [
          {
            "description": "Frontend name",
            "in": "query",
            "name": "frontend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/backend_switching_rules"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of all Backend Switching Rules",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ]
      },
      "post": {
        "description": "Adds a new Backend Switching Rule of the specified type in the specified frontend.",
        "operationId": "createBackendSwitchingRule",
        "parameters": [
          {
            "description": "Frontend name",
            "in": "query",
            "name": "frontend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/backend_switching_rule"
        },
        "responses": {
          "201": {
            "description": "Backend Switching Rule created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backend_switching_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backend_switching_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new Backend Switching Rule",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ]
      }
    },
    "/services/haproxy/configuration/backend_switching_rules/{id}": {
      "delete": {
        "description": "Deletes a Backend Switching Rule configuration by it's ID from the specified frontend.",
        "operationId": "deleteBackendSwitchingRule",
        "parameters": [
          {
            "description": "Switching Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Frontend name",
            "in": "query",
            "name": "frontend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Backend Switching Rule deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a Backend Switching Rule",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ]
      },
      "get": {
        "description": "Returns one Backend Switching Rule configuration by it's ID in the specified frontend.",
        "operationId": "getBackendSwitchingRule",
        "parameters": [
          {
            "description": "Switching Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Frontend name",
            "in": "query",
            "name": "frontend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/backend_switching_rule"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one Backend Switching Rule",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ]
      },
      "put": {
        "description": "Replaces a Backend Switching Rule configuration by it's ID in the specified frontend.",
        "operationId": "replaceBackendSwitchingRule",
        "parameters": [
          {
            "description": "Switching Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Frontend name",
            "in": "query",
            "name": "frontend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/backend_switching_rule"
        },
        "responses": {
          "200": {
            "description": "Backend Switching Rule replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backend_switching_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backend_switching_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a Backend Switching Rule",
        "tags": [
          "HAProxy configuration management",
          "Frontend options",
          "BackendSwitchingRule"
        ]
      }
    },
    "/services/haproxy/configuration/server_switching_rules": {
      "get": {
        "description": "Returns all Backend Switching Rules that are configured in specified backend.",
        "operationId": "getServerSwitchingRules",
        "parameters": [
          {
            "description": "Backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/server_switching_rules"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of all Server Switching Rules",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ]
      },
      "post": {
        "description": "Adds a new Server Switching Rule of the specified type in the specified backend.",
        "operationId": "createServerSwitchingRule",
        "parameters": [
          {
            "description": "Backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/server_switching_rule"
        },
        "responses": {
          "201": {
            "description": "Server Switching Rule created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server_switching_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server_switching_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new Server Switching Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ]
      }
    },
    "/services/haproxy/configuration/server_switching_rules/{id}": {
      "delete": {
        "description": "Deletes a Server Switching Rule configuration by it's ID from the specified backend.",
        "operationId": "deleteServerSwitchingRule",
        "parameters": [
          {
            "description": "Switching Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Server Switching Rule deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a Server Switching Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ]
      },
      "get": {
        "description": "Returns one Server Switching Rule configuration by it's ID in the specified backend.",
        "operationId": "getServerSwitchingRule",
        "parameters": [
          {
            "description": "Switching Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/server_switching_rule"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one Server Switching Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ]
      },
      "put": {
        "description": "Replaces a Server Switching Rule configuration by it's ID in the specified backend.",
        "operationId": "replaceServerSwitchingRule",
        "parameters": [
          {
            "description": "Switching Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/server_switching_rule"
        },
        "responses": {
          "200": {
            "description": "Server Switching Rule replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server_switching_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server_switching_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a Server Switching Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "ServerSwitchingRule"
        ]
      }
    },
    "/services/haproxy/configuration/filters": {
      "get": {
        "description": "Returns all Filters that are configured in specified parent.",
        "operationId": "getFilters",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/filters"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of all Filters",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ]
      },
      "post": {
        "description": "Adds a new Filter of the specified type in the specified parent.",
        "operationId": "createFilter",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/filter"
        },
        "responses": {
          "201": {
            "description": "Filter created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filter"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filter"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new Filter",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ]
      }
    },
    "/services/haproxy/configuration/filters/{id}": {
      "delete": {
        "description": "Deletes a Filter configuration by it's ID from the specified parent.",
        "operationId": "deleteFilter",
        "parameters": [
          {
            "description": "Filter ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Filter deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a Filter",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ]
      },
      "get": {
        "description": "Returns one Filter configuration by it's ID in the specified parent.",
        "operationId": "getFilter",
        "parameters": [
          {
            "description": "Filter ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/filter"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one Filter",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ]
      },
      "put": {
        "description": "Replaces a Filter configuration by it's ID in the specified parent.",
        "operationId": "replaceFilter",
        "parameters": [
          {
            "description": "Filter ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/filter"
        },
        "responses": {
          "200": {
            "description": "Filter replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filter"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filter"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a Filter",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "Filter"
        ]
      }
    },
    "/services/haproxy/configuration/stick_rules": {
      "get": {
        "description": "Returns all Stick Rules that are configured in specified backend.",
        "operationId": "getStickRules",
        "parameters": [
          {
            "description": "Backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/stick_rules"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of all Stick Rules",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ]
      },
      "post": {
        "description": "Adds a new Stick Rule of the specified type in the specified backend.",
        "operationId": "createStickRule",
        "parameters": [
          {
            "description": "Backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/stick_rule"
        },
        "responses": {
          "201": {
            "description": "Stick Rule created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stick_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stick_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new Stick Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ]
      }
    },
    "/services/haproxy/configuration/stick_rules/{id}": {
      "delete": {
        "description": "Deletes a Stick Rule configuration by it's ID from the specified backend.",
        "operationId": "deleteStickRule",
        "parameters": [
          {
            "description": "Stick Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Stick Rule deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a Stick Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ]
      },
      "get": {
        "description": "Returns one Stick Rule configuration by it's ID in the specified backend.",
        "operationId": "getStickRule",
        "parameters": [
          {
            "description": "Stick Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/stick_rule"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one Stick Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ]
      },
      "put": {
        "description": "Replaces a Stick Rule configuration by it's ID in the specified backend.",
        "operationId": "replaceStickRule",
        "parameters": [
          {
            "description": "Stick Rule ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Backend name",
            "in": "query",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/stick_rule"
        },
        "responses": {
          "200": {
            "description": "Stick Rule replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stick_rule"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stick_rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a Stick Rule",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "StickRule"
        ]
      }
    },
    "/services/haproxy/configuration/log_targets": {
      "get": {
        "description": "Returns all Log Targets that are configured in specified parent.",
        "operationId": "getLogTargets",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/log_targets"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of all Log Targets",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ]
      },
      "post": {
        "description": "Adds a new Log Target of the specified type in the specified parent.",
        "operationId": "createLogTarget",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/log_target"
        },
        "responses": {
          "201": {
            "description": "Log Target created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/log_target"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/log_target"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new Log Target",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ]
      }
    },
    "/services/haproxy/configuration/log_targets/{id}": {
      "delete": {
        "description": "Deletes a Log Target configuration by it's ID from the specified parent.",
        "operationId": "deleteLogTarget",
        "parameters": [
          {
            "description": "Log Target ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Log Target deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a Log Target",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ]
      },
      "get": {
        "description": "Returns one Log Target configuration by it's ID in the specified parent.",
        "operationId": "getLogTarget",
        "parameters": [
          {
            "description": "Log Target ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/log_target"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one Log Target",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ]
      },
      "put": {
        "description": "Replaces a Log Target configuration by it's ID in the specified parent.",
        "operationId": "replaceLogTarget",
        "parameters": [
          {
            "description": "Log Target ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/log_target"
        },
        "responses": {
          "200": {
            "description": "Log Target replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/log_target"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/log_target"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a Log Target",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "LogTarget"
        ]
      }
    },
    "/services/haproxy/configuration/acls": {
      "get": {
        "description": "Returns all ACL lines that are configured in specified parent.",
        "operationId": "getAcls",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/acls"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return an array of all ACL lines",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ]
      },
      "post": {
        "description": "Adds a new ACL line of the specified type in the specified parent.",
        "operationId": "createAcl",
        "parameters": [
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/acl"
        },
        "responses": {
          "201": {
            "description": "ACL line created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/acl"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/acl"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Add a new ACL line",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ]
      }
    },
    "/services/haproxy/configuration/acls/{id}": {
      "delete": {
        "description": "Deletes a ACL line configuration by it's ID from the specified parent.",
        "operationId": "deleteAcl",
        "parameters": [
          {
            "description": "ACL line ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "responses": {
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "ACL line deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Delete a ACL line",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ]
      },
      "get": {
        "description": "Returns one ACL line configuration by it's ID in the specified parent.",
        "operationId": "getAcl",
        "parameters": [
          {
            "description": "ACL line ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/acl"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return one ACL line",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ]
      },
      "put": {
        "description": "Replaces a ACL line configuration by it's ID in the specified parent.",
        "operationId": "replaceAcl",
        "parameters": [
          {
            "description": "ACL line ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Parent name",
            "in": "query",
            "name": "parent_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent type",
            "in": "query",
            "name": "parent_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "frontend",
                "backend"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/acl"
        },
        "responses": {
          "200": {
            "description": "ACL line replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/acl"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/acl"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Replace a ACL line",
        "tags": [
          "HAProxy configuration management",
          "Backend options",
          "Frontend options",
          "ACL"
        ]
      }
    },
    "/services/haproxy/configuration/raw": {
      "get": {
        "description": "Returns HAProxy configuration file in plain text",
        "operationId": "getHAProxyConfiguration",
        "parameters": [
          {
            "$ref": "#/components/parameters/transaction_id"
          },
          {
            "$ref": "#/components/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "headers": {
              "Configuration-Version": {
                "description": "Configuration file version",
                "x-nullable": false,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "properties": {
                    "_version": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Return HAProxy configuration",
        "tags": [
          "Configuration",
          "HAProxy configuration management"
        ]
      },
      "post": {
        "description": "Push a new haproxy configuration file in plain text",
        "operationId": "postHAProxyConfiguration",
        "parameters": [
          {
            "$ref": "#/components/parameters/version"
          },
          {
            "$ref": "#/components/parameters/force_reload"
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New HAProxy configuration pushed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Configuration change accepted and reload requested",
            "headers": {
              "Reload-ID": {
                "description": "ID of the requested reload",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "default": {
            "$ref": "#/components/responses/DefaultError"
          }
        },
        "summary": "Push new haproxy configuration",
        "tags": [
          "Configuration",
          "HAProxy configuration management"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "/v1"
    }
  ],
  "components": {
    "parameters": {
      "transaction_id": {
        "name": "transaction_id",
        "in": "query",
        "description": "ID of the transaction where we want to add the operation. Cannot be used when version is specified.",
        "required": false,
        "x-nullable": false,
        "schema": {
          "type": "string"
        }
      },
      "version": {
        "name": "version",
        "in": "query",
        "description": "Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.",
        "required": false,
        "x-nullable": false,
        "schema": {
          "type": "integer"
        }
      },
      "force_reload": {
        "name": "force_reload",
        "in": "query",
        "description": "If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "headers": {
          "Configuration-Version": {
            "description": "Configuration file version",
            "x-nullable": false,
            "schema": {
              "type": "integer"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "headers": {
          "Configuration-Version": {
            "description": "Configuration file version",
            "x-nullable": false,
            "schema": {
              "type": "integer"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "AlreadyExists": {
        "description": "The specified resource already exists",
        "headers": {
          "Configuration-Version": {
            "description": "Configuration file version",
            "x-nullable": false,
            "schema": {
              "type": "integer"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "DefaultError": {
        "description": "General Error",
        "headers": {
          "Configuration-Version": {
            "description": "Configuration file version",
            "x-nullable": false,
            "schema": {
              "type": "integer"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      }
    },
    "requestBodies": {
      "backend": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/backend"
            }
          }
        },
        "required": true
      },
      "backend_switching_rule": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/backend_switching_rule"
            }
          }
        },
        "required": true
      },
      "acl": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/acl"
            }
          }
        },
        "required": true
      },
      "http_request_rule": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/http_request_rule"
            }
          }
        },
        "required": true
      },
      "http_response_rule": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/http_response_rule"
            }
          }
        },
        "required": true
      },
      "stick_rule": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/stick_rule"
            }
          }
        },
        "required": true
      },
      "tcp_response_rule": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/tcp_response_rule"
            }
          }
        },
        "required": true
      },
      "site": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/site"
            }
          }
        },
        "required": true
      },
      "frontend": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/frontend"
            }
          }
        },
        "required": true
      },
      "bind": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/bind"
            }
          }
        },
        "required": true
      },
      "server": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/server"
            }
          }
        },
        "required": true
      },
      "tcp_request_rule": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/tcp_request_rule"
            }
          }
        },
        "required": true
      },
      "server_switching_rule": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/server_switching_rule"
            }
          }
        },
        "required": true
      },
      "filter": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/filter"
            }
          }
        },
        "required": true
      },
      "log_target": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/log_target"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "basic_auth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "site": {
        "additionalProperties": false,
        "description": "Site configuration. Sites are considered as one service and all farms connected to that service.\nFarms are connected to service using use-backend and default_backend directives. Sites let you\nconfigure simple HAProxy configurations, for more advanced options use /haproxy/configuration \nendpoints.\n",
        "example": {
          "farms": [
            {
              "balance": {
                "algorithm": "roundrobin"
              },
              "mode": "http",
              "name": "www_backend",
              "servers": [
                {
                  "address": "127.0.1.1",
                  "name": "www_server",
                  "port": 4567,
                  "weight": 30
                },
                {
                  "address": "127.0.1.2",
                  "name": "www_server_new",
                  "port": 4567,
                  "weight": 70
                }
              ],
              "use_as": "default"
            }
          ],
          "name": "test_site",
          "service": {
            "http_connection_mode": "httpclose",
            "listeners": [
              {
                "address": "127.0.0.1",
                "name": "test_listener",
                "port": 80
              },
              {
                "address": "127.0.0.1",
                "name": "test_listener_2",
                "port": 8080
              }
            ],
            "maxconn": 2000,
            "mode": "http"
          }
        },
        "properties": {
          "farms": {
            "items": {
              "properties": {
                "balance": {
                  "$ref": "#/components/schemas/balance"
                },
                "cond": {
                  "enum": [
                    "if",
                    "unless"
                  ],
                  "type": "string",
                  "x-dependency": {
                    "use_as": {
                      "required": true,
                      "value": "conditional"
                    }
                  },
                  "x-display-name": "Condition"
                },
                "cond_test": {
                  "type": "string",
                  "x-dependency": {
                    "use_as": {
                      "required": true,
                      "value": "conditional"
                    }
                  },
                  "x-display-name": "Condition Test"
                },
                "forwardfor": {
                  "$ref": "#/components/schemas/forwardfor"
                },
                "mode": {
                  "enum": [
                    "http",
                    "tcp"
                  ],
                  "type": "string"
                },
                "name": {
                  "pattern": "^[A-Za-z0-9-_.:]+$",
                  "type": "string",
                  "nullable": false
                },
                "servers": {
                  "items": {
                    "$ref": "#/components/schemas/server"
                  },
                  "type": "array"
                },
                "use_as": {
                  "enum": [
                    "default",
                    "conditional"
                  ],
                  "type": "string",
                  "nullable": false
                }
              },
              "required": [
                "name",
                "use_as"
              ],
              "type": "object",
              "x-go-name": "SiteFarm"
            },
            "type": "array"
          },
          "name": {
            "pattern": "^[A-Za-z0-9-_.:]+$",
            "type": "string",
            "nullable": false
          },
          "service": {
            "properties": {
              "http_connection_mode": {
                "enum": [
                  "http-tunnel",
                  "httpclose",
                  "forced-close",
                  "http-server-close",
                  "http-keep-alive"
                ],
                "type": "string",
                "x-dependency": {
                  "mode": {
                    "value": "http"
                  }
                },
                "x-display-name": "HTTP Connection Mode"
              },
              "listeners": {
                "items": {
                  "$ref": "#/components/schemas/bind"
                },
                "type": "array"
              },
              "maxconn": {
                "type": "integer",
                "x-display-name": "Max Connections",
                "nullable": true
              },
              "mode": {
                "enum": [
                  "http",
                  "tcp"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "name"
        ],
        "title": "Site",
        "type": "object"
      },
      "sites": {
        "title": "Sites",
        "description": "Sites array. Sites are considered as one service and all farms connected to that service.\nFarms are connected to service using use-backend and default_backend directives. Sites let you\nconfigure simple HAProxy configurations, for more advanced options use /haproxy/configuration\nendpoints.\n",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/site"
        }
      },
      "global": {
        "additionalProperties": false,
        "description": "HAProxy global configuration",
        "properties": {
          "cpu_maps": {
            "items": {
              "properties": {
                "cpu_set": {
                  "type": "string",
                  "x-display-name": "CPU Set"
                },
                "process": {
                  "type": "string",
                  "x-display-name": "Process/Thread Set"
                }
              },
              "required": [
                "process",
                "cpu_set"
              ],
              "type": "object",
              "x-go-name": "CPUMap"
            },
            "type": "array",
            "x-display-name": "CPU Maps",
            "x-go-name": "CPUMaps"
          },
          "daemon": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "external_check": {
            "type": "boolean",
            "x-display-name": "External Check"
          },
          "master-worker": {
            "type": "boolean",
            "x-display-name": "Master Worker Mode"
          },
          "maxconn": {
            "type": "integer",
            "x-display-name": "Max Connections"
          },
          "nbproc": {
            "type": "integer",
            "x-display-name": "Number of Processes"
          },
          "nbthread": {
            "type": "integer",
            "x-display-name": "Number of Threads"
          },
          "pidfile": {
            "type": "string",
            "x-display-name": "PID File"
          },
          "runtime_apis": {
            "items": {
              "properties": {
                "address": {
                  "pattern": "^[^\\s]+$",
                  "type": "string"
                },
                "exposeFdListeners": {
                  "type": "boolean",
                  "x-display-name": "Expose FD Listeners"
                },
                "level": {
                  "enum": [
                    "user",
                    "operator",
                    "admin"
                  ],
                  "type": "string"
                },
                "mode": {
                  "pattern": "^[^\\s]+$",
                  "type": "string"
                },
                "process": {
                  "pattern": "^[^\\s]+$",
                  "type": "string"
                }
              },
              "required": [
                "address"
              ],
              "type": "object",
              "x-go-name": "RuntimeAPI"
            },
            "type": "array",
            "x-display-name": "Runtime APIs",
            "x-go-name": "RuntimeAPIs"
          },
          "ssl_default_bind_ciphers": {
            "type": "string",
            "x-display-name": "SSL Default Bind Ciphers"
          },
          "ssl_default_bind_options": {
            "type": "string",
            "x-display-name": "SSL Default Bind Options"
          },
          "stats_timeout": {
            "type": "integer",
            "nullable": true
          },
          "tune_ssl_default_dh_param": {
            "type": "integer",
            "x-display-name": "SSL Default DH Parameter Size"
          }
        },
        "title": "Global",
        "type": "object"
      },
      "defaults": {
        "additionalProperties": false,
        "description": "HAProxy defaults configuration",
        "properties": {
          "adv_check": {
            "enum": [
              "ssl-hello-chk",
              "smtpchk",
              "ldap-check",
              "mysql-check",
              "pgsql-check",
              "tcp-check",
              "redis-check"
            ],
            "type": "string",
            "x-display-name": "Advanced Check"
          },
          "balance": {
            "$ref": "#/components/schemas/balance"
          },
          "check_timeout": {
            "type": "integer",
            "nullable": true
          },
          "clflog": {
            "type": "boolean",
            "x-display-name": "CLF Log"
          },
          "client_timeout": {
            "type": "integer",
            "nullable": true
          },
          "clitcpka": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-display-name": "Client TCP Keep Alive"
          },
          "connect_timeout": {
            "type": "integer",
            "nullable": true
          },
          "contstats": {
            "enum": [
              "enabled"
            ],
            "type": "string",
            "x-display-name": "Continous Statistics"
          },
          "cookie": {
            "type": "string"
          },
          "default_backend": {
            "pattern": "^[A-Za-z0-9-_.:]+$",
            "type": "string",
            "x-dynamic-enum": {
              "operation": "getBackends",
              "property": "name"
            }
          },
          "default_server": {
            "$ref": "#/components/schemas/default_server"
          },
          "dontlognull": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-display-name": "Don't Log Null"
          },
          "error_files": {
            "items": {
              "$ref": "#/components/schemas/errorfile"
            },
            "type": "array",
            "x-go-name": "ErrorFiles"
          },
          "external_check": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-display-name": "External Check"
          },
          "external_check_command": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-display-name": "External Check Command"
          },
          "external_check_path": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-display-name": "External Check Path"
          },
          "forwardfor": {
            "$ref": "#/components/schemas/forwardfor"
          },
          "http-use-htx": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-display-name": "HTTP Use HTX"
          },
          "http_connection_mode": {
            "enum": [
              "httpclose",
              "http-server-close",
              "http-keep-alive"
            ],
            "type": "string"
          },
          "http_keep_alive_timeout": {
            "type": "integer",
            "nullable": true
          },
          "http_pretend_keepalive": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "http_request_timeout": {
            "type": "integer",
            "nullable": true
          },
          "httpchk": {
            "$ref": "#/components/schemas/httpchk"
          },
          "httplog": {
            "type": "boolean",
            "x-display-name": "HTTP Log"
          },
          "log_format": {
            "type": "string"
          },
          "log_format_sd": {
            "type": "string",
            "x-display-name": "Log Format SD"
          },
          "log_separate_errors": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "log_tag": {
            "pattern": "^[^\\s]+$",
            "type": "string"
          },
          "maxconn": {
            "type": "integer",
            "x-display-name": "Max Connections",
            "nullable": true
          },
          "mode": {
            "enum": [
              "tcp",
              "http"
            ],
            "type": "string"
          },
          "queue_timeout": {
            "type": "integer",
            "nullable": true
          },
          "redispatch": {
            "$ref": "#/components/schemas/redispatch"
          },
          "retries": {
            "type": "integer",
            "nullable": true
          },
          "server_timeout": {
            "type": "integer",
            "nullable": true
          },
          "tcplog": {
            "type": "boolean",
            "x-display-name": "TCP Log"
          }
        },
        "title": "Defaults",
        "type": "object"
      },
      "frontend": {
        "additionalProperties": false,
        "description": "HAProxy frontend configuration",
        "example": {
          "default_backend": "test_backend",
          "http_connection_mode": "http-keep-alive",
          "maxconn": 2000,
          "mode": "http",
          "name": "test_frontend"
        },
        "properties": {
          "clflog": {
            "type": "boolean",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            },
            "x-display-name": "CLF Log"
          },
          "client_timeout": {
            "type": "integer",
            "nullable": true
          },
          "clitcpka": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-dependency": {
              "mode": {
                "value": "tcp"
              }
            },
            "x-display-name": "Client TCP Keep Alive"
          },
          "contstats": {
            "enum": [
              "enabled"
            ],
            "type": "string",
            "x-display-name": "Continous Statistics"
          },
          "default_backend": {
            "pattern": "^[A-Za-z0-9-_.:]+$",
            "type": "string",
            "x-dynamic-enum": {
              "operation": "getBackends",
              "property": "name"
            }
          },
          "dontlognull": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-display-name": "Don't Log Null"
          },
          "forwardfor": {
            "$ref": "#/components/schemas/forwardfor"
          },
          "http-use-htx": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            },
            "x-display-name": "HTTP Use HTX"
          },
          "http_connection_mode": {
            "enum": [
              "httpclose",
              "http-server-close",
              "http-keep-alive"
            ],
            "type": "string",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            }
          },
          "http_keep_alive_timeout": {
            "type": "integer",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            },
            "nullable": true
          },
          "http_request_timeout": {
            "type": "integer",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            },
            "nullable": true
          },
          "httplog": {
            "type": "boolean",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            },
            "x-display-name": "HTTP Log"
          },
          "log_format": {
            "type": "string"
          },
          "log_format_sd": {
            "type": "string",
            "x-display-name": "Log Format SD"
          },
          "log_separate_errors": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "log_tag": {
            "pattern": "^[A-Za-z0-9-_.:]+$",
            "type": "string"
          },
          "maxconn": {
            "type": "integer",
            "x-display-name": "Max Connections",
            "nullable": true
          },
          "mode": {
            "enum": [
              "http",
              "tcp"
            ],
            "type": "string"
          },
          "name": {
            "pattern": "^[A-Za-z0-9-_.:]+$",
            "type": "string",
            "nullable": false
          },
          "tcplog": {
            "type": "boolean",
            "x-dependency": {
              "mode": {
                "value": "tcp"
              }
            },
            "x-display-name": "TCP Log"
          }
        },
        "required": [
          "name"
        ],
        "title": "Frontend",
        "type": "object"
      },
      "frontends": {
        "title": "Frontends",
        "description": "HAProxy frontends array",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/frontend"
        }
      },
      "backend": {
        "additionalProperties": false,
        "description": "HAProxy backend configuration",
        "example": {
          "balance": {
            "algorithm": "roundrobin"
          },
          "forwardfor": {
            "enabled": true
          },
          "httpchk": {
            "method": "OPTIONS",
            "uri": "/check",
            "version": "HTTP/1.1"
          },
          "mode": "http",
          "name": "test_backend"
        },
        "properties": {
          "adv_check": {
            "enum": [
              "ssl-hello-chk",
              "smtpchk",
              "ldap-check",
              "mysql-check",
              "pgsql-check",
              "tcp-check",
              "redis-check"
            ],
            "type": "string",
            "x-display-name": "Advanced Check"
          },
          "balance": {
            "$ref": "#/components/schemas/balance"
          },
          "check_timeout": {
            "type": "integer",
            "nullable": true
          },
          "connect_timeout": {
            "type": "integer",
            "nullable": true
          },
          "cookie": {
            "type": "string",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            }
          },
          "default_server": {
            "$ref": "#/components/schemas/default_server"
          },
          "external_check": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-display-name": "External Check"
          },
          "external_check_command": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-display-name": "External Check Command"
          },
          "external_check_path": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-display-name": "External Check Path"
          },
          "forwardfor": {
            "$ref": "#/components/schemas/forwardfor"
          },
          "hash_type": {
            "properties": {
              "function": {
                "enum": [
                  "sdbm",
                  "djb2",
                  "wt6",
                  "crc32"
                ],
                "type": "string"
              },
              "method": {
                "enum": [
                  "map-based",
                  "consistent"
                ],
                "type": "string"
              },
              "modifier": {
                "enum": [
                  "avalanche"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "http-use-htx": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            }
          },
          "http_connection_mode": {
            "enum": [
              "httpclose",
              "http-server-close",
              "http-keep-alive"
            ],
            "type": "string",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            }
          },
          "http_keep_alive_timeout": {
            "type": "integer",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            },
            "nullable": true
          },
          "http_pretend_keepalive": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            }
          },
          "http_request_timeout": {
            "type": "integer",
            "x-dependency": {
              "mode": {
                "value": "http"
              }
            },
            "nullable": true
          },
          "httpchk": {
            "$ref": "#/components/schemas/httpchk"
          },
          "log_tag": {
            "pattern": "^[^\\s]+$",
            "type": "string"
          },
          "mode": {
            "enum": [
              "http",
              "tcp"
            ],
            "type": "string"
          },
          "name": {
            "pattern": "^[A-Za-z0-9-_.:]+$",
            "type": "string",
            "nullable": false
          },
          "queue_timeout": {
            "type": "integer",
            "nullable": true
          },
          "redispatch": {
            "$ref": "#/components/schemas/redispatch"
          },
          "retries": {
            "type": "integer",
            "nullable": true
          },
          "server_timeout": {
            "type": "integer",
            "nullable": true
          },
          "stick_table": {
            "properties": {
              "expire": {
                "type": "integer",
                "nullable": true
              },
              "keylen": {
                "type": "integer",
                "x-display-name": "Key Length",
                "nullable": true
              },
              "nopurge": {
                "type": "boolean",
                "x-display-name": "No Purge"
              },
              "peers": {
                "pattern": "^[^\\s]+$",
                "type": "string"
              },
              "size": {
                "type": "integer",
                "nullable": true
              },
              "store": {
                "pattern": "^[^\\s]+$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "ip",
                  "ipv6",
                  "integer",
                  "string",
                  "binary"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "name"
        ],
        "title": "Backend",
        "type": "object"
      },
      "backends": {
        "title": "Backends",
        "description": "HAProxy backends array",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/backend"
        }
      },
      "bind": {
        "additionalProperties": false,
        "description": "HAProxy frontend bind configuration",
        "example": {
          "address": "127.0.0.1",
          "name": "http",
          "port": 80
        },
        "properties": {
          "accept_proxy": {
            "type": "boolean"
          },
          "address": {
            "pattern": "^[^\\s]+$",
            "type": "string"
          },
          "alpn": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-display-name": "ALPN Protocols"
          },
          "name": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "nullable": false
          },
          "port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "nullable": true
          },
          "process": {
            "pattern": "^[^\\s]+$",
            "type": "string"
          },
          "ssl": {
            "type": "boolean"
          },
          "ssl_cafile": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "ssl": {
                "value": true
              }
            },
            "x-display-name": "SSL CA File"
          },
          "ssl_certificate": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "ssl": {
                "value": true
              }
            }
          },
          "tcp_user_timeout": {
            "type": "integer",
            "nullable": true
          },
          "transparent": {
            "type": "boolean"
          },
          "v4v6": {
            "type": "boolean"
          },
          "verify": {
            "enum": [
              "none",
              "optional",
              "required"
            ],
            "type": "string",
            "x-dependency": {
              "ssl": {
                "value": "enabled"
              }
            }
          }
        },
        "required": [
          "name"
        ],
        "title": "Bind",
        "type": "object"
      },
      "binds": {
        "title": "Binds",
        "description": "HAProxy frontend binds array (corresponds to bind directives)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/bind"
        }
      },
      "server": {
        "additionalProperties": false,
        "description": "HAProxy backend server configuration",
        "example": {
          "address": "10.1.1.1",
          "check": "enabled",
          "max-connections": 500,
          "name": "www",
          "port": 8080,
          "weight": 80
        },
        "properties": {
          "address": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "nullable": false
          },
          "backup": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "check": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "cookie": {
            "pattern": "^[^\\s]+$",
            "type": "string"
          },
          "inter": {
            "type": "integer",
            "nullable": true
          },
          "maintenance": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "maxconn": {
            "type": "integer",
            "x-display-name": "Max Connections",
            "nullable": true
          },
          "name": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "nullable": false
          },
          "on-error": {
            "enum": [
              "fastinter",
              "fail-check",
              "sudden-death",
              "mark-down"
            ],
            "type": "string"
          },
          "on-marked-down": {
            "enum": [
              "shutdown-sessions"
            ],
            "type": "string"
          },
          "on-marked-up": {
            "enum": [
              "shutdown-backup-sessions"
            ],
            "type": "string"
          },
          "port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "nullable": true
          },
          "ssl": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "ssl_cafile": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "ssl": {
                "value": "enabled"
              }
            },
            "x-display-name": "SSL CA File"
          },
          "ssl_certificate": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "ssl": {
                "value": "enabled"
              }
            }
          },
          "tls_tickets": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string",
            "x-dependency": {
              "ssl": {
                "value": "enabled"
              }
            }
          },
          "verify": {
            "enum": [
              "none",
              "required"
            ],
            "type": "string",
            "x-dependency": {
              "ssl": {
                "value": "enabled"
              }
            }
          },
          "weight": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "name"
        ],
        "title": "Server",
        "type": "object"
      },
      "servers": {
        "title": "Servers",
        "description": "HAProxy backend servers array",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/server"
        }
      },
      "http_request_rule": {
        "additionalProperties": false,
        "description": "HAProxy HTTP request rule configuration (corresponds to http-request directives)",
        "example": {
          "cond": "unless",
          "cond_test": "{ src 192.168.0.0/16 }",
          "hdr_format": "%T",
          "hdr_name": "X-Haproxy-Current-Date",
          "id": 0,
          "type": "add-header"
        },
        "properties": {
          "acl_file": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": [
                  "add-acl",
                  "del-acl"
                ]
              }
            },
            "x-display-name": "ACL File"
          },
          "acl_keyfmt": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": [
                  "add-acl",
                  "del-acl"
                ]
              }
            },
            "x-display-name": "ACL Key Format"
          },
          "auth_realm": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "value": "auth"
              }
            },
            "x-display-name": "Authentication Realm"
          },
          "cond": {
            "enum": [
              "if",
              "unless"
            ],
            "type": "string",
            "x-display-name": "Condition"
          },
          "cond_test": {
            "type": "string",
            "x-dependency": {
              "cond": {
                "required": true
              }
            },
            "x-display-name": "Condition Test",
            "x-dynamic-enum": {
              "freeFormat": true,
              "operation": "getACLs",
              "property": "acl_name"
            }
          },
          "deny_status": {
            "type": "integer",
            "x-dependency": {
              "type": {
                "value": [
                  "deny",
                  "tarpit"
                ]
              }
            },
            "nullable": false
          },
          "hdr_format": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": [
                  "replace-header",
                  "replace-value",
                  "set-header",
                  "add-header"
                ]
              }
            },
            "x-display-name": "Header Format"
          },
          "hdr_match": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": [
                  "replace-header",
                  "replace-value"
                ]
              }
            },
            "x-display-name": "Header Match"
          },
          "hdr_name": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": [
                  "add-header",
                  "replace-header",
                  "del-header",
                  "set-header",
                  "replace-value"
                ]
              }
            },
            "x-display-name": "Header Name"
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "log_level": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "silent"
            ],
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "set-log-level"
              }
            }
          },
          "query-fmt": {
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "set-query"
              }
            }
          },
          "redir_code": {
            "enum": [
              301,
              302,
              303
            ],
            "type": "integer",
            "x-dependency": {
              "type": {
                "value": "redirect"
              }
            },
            "x-display-name": "Redirect Code"
          },
          "redir_option": {
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "redirect"
              }
            },
            "x-display-name": "Redirect Option"
          },
          "redir_type": {
            "enum": [
              "location",
              "prefix",
              "scheme"
            ],
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "redirect"
              }
            },
            "x-display-name": "Redirect Type"
          },
          "redir_value": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "redirect"
              }
            },
            "x-display-name": "Redirect Value"
          },
          "spoe_engine": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "send-spoe-group"
              }
            },
            "x-display-name": "SPOE Engine"
          },
          "spoe_group": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "send-spoe-group"
              }
            },
            "x-display-name": "SPOE Group"
          },
          "type": {
            "enum": [
              "allow",
              "deny",
              "auth",
              "redirect",
              "tarpit",
              "add-header",
              "replace-header",
              "replace-value",
              "del-header",
              "set-header",
              "set-log-level",
              "set-query",
              "set-uri",
              "set-var",
              "send-spoe-group",
              "add-acl",
              "del-acl"
            ],
            "type": "string",
            "nullable": false
          },
          "uri-fmt": {
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "set-uri"
              }
            }
          },
          "var_expr": {
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "set-var"
              }
            },
            "x-display-name": "Var Expression"
          },
          "var_name": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "set-var"
              }
            }
          },
          "var_scope": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "set-var"
              }
            }
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "HTTP Request Rule",
        "type": "object"
      },
      "http_request_rules": {
        "title": "HTTP Request Rules Array",
        "description": "HAProxy HTTP request rules array (corresponds to http-request directives)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/http_request_rule"
        }
      },
      "http_response_rule": {
        "additionalProperties": false,
        "description": "HAProxy HTTP response rule configuration (corresponds to http-response directives)",
        "example": {
          "cond": "unless",
          "cond_test": "{ src 192.168.0.0/16 }",
          "hdr_format": "%T",
          "hdr_name": "X-Haproxy-Current-Date",
          "id": 0,
          "type": "add-header"
        },
        "properties": {
          "acl_file": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": [
                  "add-acl",
                  "del-acl"
                ]
              }
            }
          },
          "acl_keyfmt": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": [
                  "add-acl",
                  "del-acl"
                ]
              }
            },
            "x-display-name": "ACK Key Format"
          },
          "cond": {
            "enum": [
              "if",
              "unless"
            ],
            "type": "string",
            "x-display-name": "Condition"
          },
          "cond_test": {
            "type": "string",
            "x-dependency": {
              "cond": {
                "required": true
              }
            },
            "x-display-name": "Condition Test",
            "x-dynamic-enum": {
              "freeFormat": true,
              "operation": "getACLs",
              "property": "acl_name"
            }
          },
          "hdr_format": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": [
                  "replace-header",
                  "replace-value",
                  "set-header",
                  "add-header"
                ]
              }
            },
            "x-display-name": "Header Format"
          },
          "hdr_match": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": [
                  "replace-header",
                  "replace-value"
                ]
              }
            },
            "x-display-name": "Header Match"
          },
          "hdr_name": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": [
                  "add-header",
                  "replace-header",
                  "del-header",
                  "set-header",
                  "replace-value"
                ]
              }
            },
            "x-display-name": "Header Name"
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "log_level": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "silent"
            ],
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "set-log-level"
              }
            }
          },
          "redir_code": {
            "enum": [
              301,
              302,
              303
            ],
            "type": "integer",
            "x-dependency": {
              "type": {
                "value": "redirect"
              }
            },
            "x-display-name": "Redirect Code"
          },
          "redir_option": {
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "redirect"
              }
            },
            "x-display-name": "Redirect Option"
          },
          "redir_type": {
            "enum": [
              "location",
              "prefix",
              "scheme"
            ],
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "redirect"
              }
            },
            "x-display-name": "Redirect Type"
          },
          "redir_value": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "redirect"
              }
            },
            "x-display-name": "Redirect Value"
          },
          "spoe_engine": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "send-spoe-group"
              }
            }
          },
          "spoe_group": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "send-spoe-group"
              }
            }
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "set-status"
              }
            },
            "nullable": false
          },
          "status_reason": {
            "type": "string",
            "x-dependency": {
              "type": {
                "value": "set-status"
              }
            }
          },
          "type": {
            "enum": [
              "allow",
              "deny",
              "redirect",
              "add-header",
              "set-header",
              "del-header",
              "set-log-level",
              "set-var",
              "set-status",
              "send-spoe-group",
              "replace-header",
              "replace-value",
              "add-acl",
              "del-acl"
            ],
            "type": "string",
            "nullable": false
          },
          "var_expr": {
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "set-var"
              }
            },
            "x-display-name": "Var Expression"
          },
          "var_name": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "set-var"
              }
            }
          },
          "var_scope": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "set-var"
              }
            }
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "HTTP Response Rule",
        "type": "object"
      },
      "http_response_rules": {
        "title": "HTTP Response Rules Array",
        "description": "HAProxy HTTP response rules array (corresponds to http-response directives)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/http_response_rule"
        }
      },
      "tcp_request_rule": {
        "additionalProperties": false,
        "description": "HAProxy TCP Request Rule configuration (corresponds to tcp-request)",
        "example": {
          "cond": "if",
          "cond_test": "{ src 192.168.0.0/16 }",
          "id": 0,
          "type": "accept"
        },
        "properties": {
          "action": {
            "enum": [
              "accept",
              "reject"
            ],
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": [
                  "connection",
                  "content",
                  "session"
                ]
              }
            },
            "nullable": false
          },
          "cond": {
            "enum": [
              "if",
              "unless"
            ],
            "type": "string",
            "x-dependency": {
              "type": {
                "value": [
                  "connection",
                  "content",
                  "session"
                ]
              }
            },
            "x-display-name": "Condition"
          },
          "cond_test": {
            "type": "string",
            "x-dependency": {
              "cond": {
                "required": true
              },
              "type": {
                "required": true,
                "value": [
                  "connection",
                  "content",
                  "session"
                ]
              }
            },
            "x-display-name": "Condition Test",
            "x-dynamic-enum": {
              "freeFormat": true,
              "operation": "getACLs",
              "property": "acl_name"
            }
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "inspect-delay"
              }
            },
            "nullable": true
          },
          "type": {
            "enum": [
              "connection",
              "content",
              "inspect-delay",
              "session"
            ],
            "type": "string",
            "nullable": false
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "TCP Request Rule",
        "type": "object"
      },
      "tcp_request_rules": {
        "title": "TCP Request Rules Array",
        "description": "HAProxy TCP request rules array (corresponds to tcp-request directive)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/tcp_request_rule"
        }
      },
      "tcp_response_rule": {
        "additionalProperties": false,
        "description": "HAProxy TCP Response Rule configuration (corresponds to tcp-response)",
        "example": {
          "cond": "if",
          "cond_test": "{ src 192.168.0.0/16 }",
          "id": 0,
          "type": "accept"
        },
        "properties": {
          "action": {
            "enum": [
              "accept",
              "reject"
            ],
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "content"
              }
            },
            "nullable": false
          },
          "cond": {
            "enum": [
              "if",
              "unless"
            ],
            "type": "string",
            "x-dependency": {
              "type": {
                "value": "content"
              }
            },
            "x-display-name": "Condition"
          },
          "cond_test": {
            "type": "string",
            "x-dependency": {
              "cond": {
                "required": true
              },
              "type": {
                "value": "content"
              }
            },
            "x-display-name": "Condition Test",
            "x-dynamic-enum": {
              "freeFormat": true,
              "operation": "getACLs",
              "property": "acl_name"
            }
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "inspect-delay"
              }
            },
            "nullable": true
          },
          "type": {
            "enum": [
              "content",
              "inspect-delay"
            ],
            "type": "string",
            "nullable": false
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "TCP Response Rule",
        "type": "object"
      },
      "tcp_response_rules": {
        "title": "TCP Response Rules Array",
        "description": "HAProxy TCP response rules array (corresponds to tcp-response directive)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/tcp_response_rule"
        }
      },
      "backend_switching_rule": {
        "additionalProperties": false,
        "description": "HAProxy backend switching rule configuration (corresponds to use_backend directive)",
        "example": {
          "cond": "if",
          "cond_test": "{ req_ssl_sni -i www.example.com }",
          "id": 0,
          "name": "test_backend"
        },
        "properties": {
          "cond": {
            "enum": [
              "if",
              "unless"
            ],
            "type": "string",
            "x-display-name": "Condition"
          },
          "cond_test": {
            "type": "string",
            "x-dependency": {
              "cond": {
                "required": true
              }
            },
            "x-display-name": "Condition Test",
            "x-dynamic-enum": {
              "freeFormat": true,
              "operation": "getACLs",
              "property": "acl_name"
            }
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "name": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-display-name": "Backend Name",
            "x-dynamic-enum": {
              "operation": "getBackends",
              "property": "name"
            },
            "nullable": false
          }
        },
        "required": [
          "id",
          "name"
        ],
        "title": "Backend Switching Rule",
        "type": "object"
      },
      "backend_switching_rules": {
        "title": "Backend Switching Rules Array",
        "description": "HAProxy backend switching rules array (corresponds to use_backend directives)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/backend_switching_rule"
        }
      },
      "server_switching_rule": {
        "additionalProperties": false,
        "description": "HAProxy server switching rule configuration (corresponds to use-server directive)",
        "example": {
          "cond": "if",
          "cond_test": "{ req_ssl_sni -i www.example.com }",
          "id": 0,
          "target_server": "www"
        },
        "properties": {
          "cond": {
            "enum": [
              "if",
              "unless"
            ],
            "type": "string",
            "x-display-name": "Condition"
          },
          "cond_test": {
            "type": "string",
            "x-dependency": {
              "cond": {
                "required": true
              }
            },
            "x-display-name": "Condition Test",
            "x-dynamic-enum": {
              "freeFormat": true,
              "operation": "getACLs",
              "property": "acl_name"
            }
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "target_server": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dynamic-enum": {
              "operation": "getServers",
              "property": "name"
            },
            "nullable": false
          }
        },
        "required": [
          "id",
          "target_server"
        ],
        "title": "Server Switching Rule",
        "type": "object"
      },
      "server_switching_rules": {
        "title": "Server Switching Rules Array",
        "description": "HAProxy backend server switching rules array (corresponds to use-server directives)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/server_switching_rule"
        }
      },
      "filter": {
        "additionalProperties": false,
        "description": "HAProxy filters",
        "example": {
          "id": 0,
          "trace_name": "name",
          "trace_rnd_parsing": true,
          "type": "trace"
        },
        "properties": {
          "cache_name": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "cache"
              }
            }
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "spoe_config": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "required": true,
                "value": "spoe"
              }
            }
          },
          "spoe_engine": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "value": "spoe"
              }
            }
          },
          "trace_hexdump": {
            "type": "boolean",
            "x-dependency": {
              "type": {
                "value": "trace"
              }
            }
          },
          "trace_name": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "type": {
                "value": "trace"
              }
            }
          },
          "trace_rnd_forwarding": {
            "type": "boolean",
            "x-dependency": {
              "type": {
                "value": "trace"
              }
            },
            "x-display-name": "Trace Random Forwarding"
          },
          "trace_rnd_parsing": {
            "type": "boolean",
            "x-dependency": {
              "type": {
                "value": "trace"
              }
            },
            "x-display-name": "Trace Random Parsing"
          },
          "type": {
            "enum": [
              "trace",
              "compression",
              "spoe",
              "cache"
            ],
            "type": "string",
            "nullable": false
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "Filter",
        "type": "object"
      },
      "filters": {
        "title": "Filters Array",
        "description": "HAProxy filters array (corresponds to filter directive)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/filter"
        }
      },
      "stick_rule": {
        "additionalProperties": false,
        "description": "Define a pattern used to create an entry in a stickiness table or matching condition or associate a user to a server.",
        "example": {
          "id": 0,
          "pattern": "src",
          "type": "storeonly"
        },
        "properties": {
          "cond": {
            "enum": [
              "if",
              "unless"
            ],
            "type": "string",
            "x-display-name": "Condition"
          },
          "cond_test": {
            "type": "string",
            "x-dependency": {
              "cond": {
                "required": true
              }
            },
            "x-display-name": "Condition Test",
            "x-dynamic-enum": {
              "freeFormat": true,
              "operation": "getACLs",
              "property": "acl_name"
            }
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "pattern": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "nullable": false
          },
          "table": {
            "pattern": "^[^\\s]+$",
            "type": "string"
          },
          "type": {
            "enum": [
              "match",
              "on",
              "store-request",
              "store-response"
            ],
            "type": "string",
            "nullable": false
          }
        },
        "required": [
          "id",
          "type",
          "pattern"
        ],
        "title": "Stick Rule",
        "type": "object"
      },
      "stick_rules": {
        "title": "Stick Rules Array",
        "description": "HAProxy backend stick rules array (corresponds to stick store-request, stick match, stick on, stick store-response)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/stick_rule"
        }
      },
      "log_target": {
        "additionalProperties": false,
        "description": "Per-instance logging of events and traffic.",
        "properties": {
          "address": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "x-dependency": {
              "global": {
                "required": true,
                "value": false
              },
              "nolog": {
                "required": true,
                "value": false
              }
            }
          },
          "facility": {
            "enum": [
              "kern",
              "user",
              "mail",
              "daemon",
              "auth",
              "syslog",
              "lpr",
              "news",
              "uucp",
              "cron",
              "auth2",
              "ftp",
              "ntp",
              "audit",
              "alert",
              "cron2",
              "local0",
              "local1",
              "local2",
              "local3",
              "local4",
              "local5",
              "local6",
              "local7"
            ],
            "type": "string",
            "x-dependency": {
              "global": {
                "required": true,
                "value": false
              },
              "nolog": {
                "required": true,
                "value": false
              }
            }
          },
          "format": {
            "enum": [
              "rfc3164",
              "rfc5424",
              "short",
              "raw"
            ],
            "type": "string",
            "x-dependency": {
              "global": {
                "value": false
              },
              "nolog": {
                "value": false
              }
            }
          },
          "global": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "length": {
            "type": "integer",
            "x-dependency": {
              "global": {
                "value": false
              },
              "nolog": {
                "value": false
              }
            }
          },
          "level": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug"
            ],
            "type": "string",
            "x-dependency": {
              "global": {
                "value": false
              },
              "nolog": {
                "value": false
              }
            }
          },
          "minlevel": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug"
            ],
            "type": "string",
            "x-dependency": {
              "global": {
                "value": false
              },
              "level": {
                "required": false
              },
              "nolog": {
                "value": false
              }
            }
          },
          "nolog": {
            "type": "boolean"
          }
        },
        "required": [
          "id"
        ],
        "title": "Log Target",
        "type": "object"
      },
      "log_targets": {
        "title": "Log Target Array",
        "description": "HAProxy log target array (corresponds to log directives)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/log_target"
        }
      },
      "acl": {
        "additionalProperties": false,
        "description": "The use of Access Control Lists (ACL) provides a flexible solution to perform\ncontent switching and generally to take decisions based on content extracted\nfrom the request, the response or any environmental status.\n",
        "properties": {
          "acl_name": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "nullable": false
          },
          "criterion": {
            "pattern": "^[^\\s]+$",
            "type": "string",
            "nullable": false
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": false
          }
        },
        "required": [
          "id",
          "acl_name",
          "criterion",
          "value"
        ],
        "title": "ACL Lines",
        "type": "object"
      },
      "acls": {
        "title": "ACL Lines Array",
        "description": "HAProxy ACL lines array (corresponds to acl directives)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/acl"
        }
      },
      "native_stats": {
        "description": "HAProxy stats array",
        "items": {
          "description": "Stats from one runtime API",
          "properties": {
            "error": {
              "type": "string"
            },
            "runtimeAPI": {
              "type": "string"
            },
            "stats": {
              "items": {
                "$ref": "#/components/schemas/native_stat"
              },
              "type": "array"
            }
          },
          "title": "Stats collection",
          "type": "object",
          "x-go-name": "NativeStatsCollection"
        },
        "title": "Stats Array",
        "type": "array",
        "x-go-name": "NativeStats"
      },
      "native_stat": {
        "description": "Current stats for one object.",
        "example": {
          "name": "frontend_test",
          "stats": {
            "bin": 4326578,
            "bout": 889901290,
            "comp_byp": 0,
            "comp_in": 0,
            "comp_out": 0,
            "comp_rsp": 0,
            "conn_rate": 12,
            "conn_rate_max": 456,
            "conn_tot": 45682,
            "dcon": 0,
            "dreq": 4,
            "dresp": 1,
            "dses": 0,
            "ereq": 54,
            "hrsp_1xx": 0,
            "hrsp_2xx": 165,
            "hrsp_3xx": 12,
            "hrsp_4xx": 50,
            "hrsp_5xx": 4,
            "hrsp_other": 0,
            "iid": 0,
            "intercepted": 346,
            "mode": "http",
            "pid": 3204,
            "rate": 64,
            "rate_lim": 20000,
            "rate_max": 4000,
            "req_rate": 49,
            "req_rate_max": 3965,
            "req_total": 1254786,
            "scur": 129,
            "slim": 2000,
            "smax": 2000,
            "status": "UP",
            "stot": 12902
          },
          "type": "frontend"
        },
        "properties": {
          "backend_name": {
            "type": "string",
            "x-dependency": {
              "type": "server"
            }
          },
          "name": {
            "type": "string"
          },
          "stats": {
            "properties": {
              "act": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "addr": {
                "type": "string",
                "x-dependency": {
                  "type": "server"
                }
              },
              "agent_code": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "agent_desc": {
                "type": "string",
                "x-dependency": {
                  "type": "server"
                }
              },
              "agent_duration": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "agent_fall": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "agent_health": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "agent_rise": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "agent_status": {
                "enum": [
                  "UNK",
                  "INI",
                  "SOCKERR",
                  "L40K",
                  "L4TOUT",
                  "L4CON",
                  "L7OK",
                  "L7STS"
                ],
                "type": "string",
                "x-dependency": {
                  "type": "server"
                }
              },
              "algo": {
                "type": "string",
                "x-dependency": {
                  "type": "backend"
                }
              },
              "bck": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "bin": {
                "type": "integer",
                "nullable": true
              },
              "bout": {
                "type": "integer",
                "nullable": true
              },
              "check_code": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "check_desc": {
                "type": "string",
                "x-dependency": {
                  "type": "server"
                }
              },
              "check_duration": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "check_fall": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "check_health": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "check_rise": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "check_status": {
                "enum": [
                  "UNK",
                  "INI",
                  "SOCKERR",
                  "L40K",
                  "L4TOUT",
                  "L4CON",
                  "L6OK",
                  "L6TOUT",
                  "L6RSP",
                  "L7OK",
                  "L7OKC",
                  "L7TOUT",
                  "L7RSP",
                  "L7STS"
                ],
                "type": "string",
                "x-dependency": {
                  "type": "server"
                }
              },
              "chkdown": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "chkfail": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "cli_abrt": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "comp_byp": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "frontend",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "comp_in": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "frontend",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "comp_out": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "frontend",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "comp_rsp": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "frontend",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "conn_rate": {
                "type": "integer",
                "x-dependency": {
                  "type": "frontend"
                },
                "nullable": true
              },
              "conn_rate_max": {
                "type": "integer",
                "x-dependency": {
                  "type": "frontend"
                },
                "nullable": true
              },
              "conn_tot": {
                "type": "integer",
                "x-dependency": {
                  "type": "frontend"
                },
                "nullable": true
              },
              "cookie": {
                "type": "string",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                }
              },
              "ctime": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "dcon": {
                "type": "integer",
                "x-dependency": {
                  "type": "frontend"
                },
                "nullable": true
              },
              "downtime": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "dreq": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "frontend",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "dresp": {
                "type": "integer",
                "nullable": true
              },
              "dses": {
                "type": "integer",
                "x-dependency": {
                  "type": "frontend"
                },
                "nullable": true
              },
              "econ": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "ereq": {
                "type": "integer",
                "x-dependency": {
                  "type": "frontend"
                },
                "nullable": true
              },
              "eresp": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "hanafail": {
                "type": "string",
                "x-dependency": {
                  "type": "server"
                }
              },
              "hrsp_1xx": {
                "type": "integer",
                "nullable": true
              },
              "hrsp_2xx": {
                "type": "integer",
                "nullable": true
              },
              "hrsp_3xx": {
                "type": "integer",
                "nullable": true
              },
              "hrsp_4xx": {
                "type": "integer",
                "nullable": true
              },
              "hrsp_5xx": {
                "type": "integer",
                "nullable": true
              },
              "hrsp_other": {
                "type": "integer",
                "nullable": true
              },
              "iid": {
                "type": "integer",
                "nullable": true
              },
              "intercepted": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "frontend",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "lastchg": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "lastsess": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "lbtot": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "mode": {
                "enum": [
                  "tcp",
                  "http",
                  "health",
                  "unknown"
                ],
                "type": "string"
              },
              "pid": {
                "type": "integer",
                "nullable": true
              },
              "qcur": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "qlimit": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "qmax": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "qtime": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "rate": {
                "type": "integer",
                "nullable": true
              },
              "rate_lim": {
                "type": "integer",
                "x-dependency": {
                  "type": "frontend"
                },
                "nullable": true
              },
              "rate_max": {
                "type": "integer",
                "nullable": true
              },
              "req_rate": {
                "type": "integer",
                "x-dependency": {
                  "type": "frontend"
                },
                "nullable": true
              },
              "req_rate_max": {
                "type": "integer",
                "x-dependency": {
                  "type": "frontend"
                },
                "nullable": true
              },
              "req_tot": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "frontend",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "rtime": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "scur": {
                "type": "integer",
                "nullable": true
              },
              "sid": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "slim": {
                "type": "integer",
                "nullable": true
              },
              "smax": {
                "type": "integer",
                "nullable": true
              },
              "srv_abrt": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "status": {
                "enum": [
                  "UP",
                  "DOWN",
                  "NOLB",
                  "MAINT",
                  "no check"
                ],
                "type": "string"
              },
              "stot": {
                "type": "integer",
                "nullable": true
              },
              "throttle": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "tracked": {
                "type": "integer",
                "x-dependency": {
                  "type": "server"
                },
                "nullable": true
              },
              "ttime": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "weight": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "wredis": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              },
              "wretr": {
                "type": "integer",
                "x-dependency": {
                  "type": [
                    "server",
                    "backend"
                  ]
                },
                "nullable": true
              }
            },
            "type": "object",
            "x-go-name": "NativeStatStats"
          },
          "type": {
            "enum": [
              "backend",
              "server",
              "frontend"
            ],
            "type": "string"
          }
        },
        "title": "Stats",
        "type": "object",
        "x-go-name": "NativeStat"
      },
      "error": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "API Error",
        "properties": {
          "code": {
            "type": "integer",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "code",
          "message"
        ],
        "title": "Error",
        "type": "object"
      },
      "endpoint": {
        "description": "Endpoint definition",
        "properties": {
          "description": {
            "description": "Endpoint description",
            "type": "string"
          },
          "title": {
            "description": "Endpoint title",
            "type": "string"
          },
          "url": {
            "description": "Path to the endpoint",
            "type": "string"
          }
        },
        "title": "Endpoint",
        "type": "object"
      },
      "endpoints": {
        "title": "Endpoints Array",
        "description": "Collection of endpoints",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/endpoint"
        }
      },
      "process_info": {
        "description": "General HAProxy process information",
        "example": {
          "haproxy": {
            "address": "127.0.0.1",
            "pid": 1234,
            "processes": 4,
            "release_date": "2016-03-11",
            "time": "2018-07-02T12:00:00.124Z",
            "uptime": 8,
            "version": "1.7-dev1-868ab3-148"
          }
        },
        "properties": {
          "haproxy": {
            "properties": {
              "pid": {
                "description": "Process id of the replying worker process",
                "type": "integer",
                "nullable": true
              },
              "processes": {
                "description": "Number of spawned processes",
                "type": "integer",
                "nullable": true
              },
              "release_date": {
                "description": "HAProxy version release date",
                "format": "date",
                "type": "string"
              },
              "uptime": {
                "description": "HAProxy uptime in s",
                "type": "integer",
                "nullable": true
              },
              "version": {
                "description": "HAProxy version string",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "title": "HAProxy Information",
        "type": "object"
      },
      "transaction": {
        "description": "HAProxy configuration transaction",
        "example": {
          "_version": 2,
          "id": "273e3385-2d0c-4fb1-aa27-93cbb31ff203",
          "status": "in_progress"
        },
        "properties": {
          "_version": {
            "type": "integer"
          },
          "id": {
            "pattern": "^[^\\s]+$",
            "type": "string"
          },
          "status": {
            "enum": [
              "failed",
              "in_progress",
              "success"
            ],
            "type": "string"
          }
        },
        "title": "Configuration transaction",
        "type": "object"
      },
      "transactions": {
        "title": "Transactions array",
        "description": "Configuration transactions array",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/transaction"
        }
      },
      "info": {
        "description": "General API, OS and hardware information",
        "example": {
          "api": {
            "build_date": "2019-08-21T17:31:56.000Z",
            "version": "v1.2.1 45a3288.dev"
          },
          "system": {
            "cpu_info": {
              "model": "Intel(R) Core(TM) i7-7500U CPU @ 2.70GHz",
              "num_cpus": 4
            },
            "hostname": "test",
            "mem_info": {
              "dataplaneapi_memory": 44755536,
              "free_memory": 5790642176,
              "total_memory": 16681517056
            },
            "os_string": "Linux 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019",
            "time": 1566401525,
            "uptime": 87340
          }
        },
        "properties": {
          "api": {
            "properties": {
              "build_date": {
                "description": "HAProxy Dataplane API build date",
                "format": "date-time",
                "type": "string"
              },
              "version": {
                "description": "HAProxy Dataplane API version string",
                "type": "string"
              }
            },
            "type": "object"
          },
          "system": {
            "properties": {
              "cpu_info": {
                "properties": {
                  "model": {
                    "type": "string"
                  },
                  "num_cpus": {
                    "description": "Number of logical CPUs",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "hostname": {
                "description": "Hostname where the HAProxy is running",
                "type": "string"
              },
              "mem_info": {
                "properties": {
                  "dataplaneapi_memory": {
                    "type": "integer"
                  },
                  "free_memory": {
                    "type": "integer"
                  },
                  "total_memory": {
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "os_string": {
                "description": "OS string",
                "type": "string"
              },
              "time": {
                "description": "Current time in milliseconds since Epoch.",
                "type": "integer"
              },
              "uptime": {
                "description": "System uptime",
                "type": "integer",
                "nullable": true
              }
            },
            "type": "object"
          }
        },
        "title": "Information",
        "type": "object"
      },
      "reload": {
        "description": "HAProxy reload",
        "example": {
          "id": "2019-01-03-44",
          "status": "in_progress"
        },
        "properties": {
          "id": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}-\\d+$",
            "type": "string"
          },
          "reload_timestamp": {
            "type": "integer"
          },
          "response": {
            "type": "string"
          },
          "status": {
            "enum": [
              "failed",
              "in_progress",
              "succeeded"
            ],
            "type": "string"
          }
        },
        "title": "HAProxy reload",
        "type": "object"
      },
      "reloads": {
        "title": "HAProxy Reloads Array",
        "description": "HAProxy reloads array",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/reload"
        }
      },
      "balance": {
        "properties": {
          "algorithm": {
            "enum": [
              "roundrobin",
              "static-rr",
              "leastconn",
              "first",
              "source",
              "uri",
              "url_param",
              "random"
            ],
            "type": "string"
          },
          "arguments": {
            "items": {
              "pattern": "^[^\\s]+$",
              "type": "string"
            },
            "type": "array",
            "x-dependency": {
              "algorithm": {
                "value": [
                  "uri",
                  "url_param"
                ]
              }
            }
          }
        },
        "type": "object"
      },
      "forwardfor": {
        "properties": {
          "enabled": {
            "enum": [
              "enabled"
            ],
            "type": "string"
          },
          "except": {
            "pattern": "^[^\\s]+$",
            "type": "string"
          },
          "header": {
            "pattern": "^[^\\s]+$",
            "type": "string"
          },
          "ifnone": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled"
        ],
        "type": "object",
        "x-display-name": "ForwardFor"
      },
      "default_server": {
        "properties": {
          "fall": {
            "type": "integer",
            "nullable": true
          },
          "inter": {
            "type": "integer",
            "nullable": true
          },
          "port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "nullable": true
          },
          "rise": {
            "type": "integer",
            "nullable": true
          }
        },
        "type": "object"
      },
      "httpchk": {
        "properties": {
          "method": {
            "enum": [
              "HEAD",
              "PUT",
              "POST",
              "GET",
              "TRACE",
              "PATCH"
            ],
            "type": "string"
          },
          "uri": {
            "pattern": "^[^\\s]+$",
            "type": "string"
          },
          "version": {
            "pattern": "^[^\\s]+$",
            "type": "string"
          }
        },
        "type": "object",
        "x-display-name": "HTTP Check"
      },
      "redispatch": {
        "properties": {
          "enabled": {
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "interval": {
            "type": "integer",
            "nullable": false
          }
        },
        "required": [
          "enabled"
        ],
        "type": "object"
      },
      "errorfile": {
        "properties": {
          "code": {
            "enum": [
              200,
              400,
              403,
              405,
              408,
              425,
              429,
              500,
              502,
              503,
              504
            ],
            "type": "integer"
          },
          "file": {
            "type": "string"
          }
        },
        "type": "object",
        "x-display-name": "Error File"
      }
    }
  }
}